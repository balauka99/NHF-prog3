package tile;

import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.imageio.ImageIO;

import gameplay.GamePanel;

public class TileManager {
	private GamePanel gameP;
	private Tile[] tiles;
	int map[][];	// 2 Dimenziós tömbben tároljuk el a fájlból betöltött mapot
	
	public TileManager(GamePanel gp) {
		gameP = gp;
		tiles = new Tile[10];	//Ennyi tileunk lehet max, flore, lava, wall stb...
		map = new int[gameP.maxOszlop][gameP.maxSor];	// Létrehozzuk a mátrixot, és akkorára álítjuk amekkora a game panel tile felosztás
		setTilesImage();
	}
	public void loadMap() {
		try {
			InputStream inS = getClass().getResourceAsStream("/maps/map1.txt");
			BufferedReader bufR = new BufferedReader(new InputStreamReader(inS));
		}catch(Exception e) {
			
		}
	}
	public void setTilesImage() {
		try {
			tiles[0] = new Tile();
			tiles[0].setSkin(ImageIO.read(getClass().getResourceAsStream("/tiles/flore.png")));
			tiles[1] = new Tile();
			tiles[1].setSkin(ImageIO.read(getClass().getResourceAsStream("/tiles/wall.png")));
			tiles[2] = new Tile();
			tiles[2].setSkin(ImageIO.read(getClass().getResourceAsStream("/tiles/lava.png")));
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	public void draw(Graphics2D grap2) {
		int col = 0;
		int row = 0;
		int x = 0;
		int y = 0;
		
		while(col <gameP.maxOszlop && row < gameP.maxSor) {
			grap2.drawImage(tiles[2].getSkin(), x, y, gameP.tileSize, gameP.tileSize, null);
			col++;
			x += gameP.tileSize;
			
			if(col == gameP.maxOszlop) {
				col = 0;
				x = 0;
				row++;
				y += gameP.tileSize;
			}
		}
	}
}
