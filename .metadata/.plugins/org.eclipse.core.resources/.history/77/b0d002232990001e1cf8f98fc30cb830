package entity;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.io.IOException;

import error.OwnError;
import loaders.SheetLoader;
/**
 * Szüksége van az EyeBall-nak egy animáció statre
 * Still - éppen nem mozog, de él
 * Move - éppen mozog valamerre
 * Attack - éppen támad
 * Ha halott akkor egyik állapotban sincsen, és nem is tud visszamenni egyikbe se
 */
enum Animation_States {Still, Move, Attack}
/**
 * Ez egy ellenfél entitás, egy kis szem a kinézete, az animációja miatt szükség van, hogy Runnable legyen
 */
@SuppressWarnings("serial")
public class EyeBall extends Entity implements Runnable{
	/**
	 * Kell egy száll amin futhat az EyeBall animációja
	 */
	private transient Thread animation;
	/**
	 * Az animáció state amiben éppen van
	 */
	private Animation_States aniState = Animation_States.Still;
	/**
	 * Az elöző képfrissítésnél volt koordinátája, hogy tudjuk éppen egyhelyebn áll-e vagy sem
	 */
	private int lastX, lastY;
	/**
	 * Konstruktor, beállítja az alap adatait, kinézet hitbox ami előre megvan határozva mekkora
	 * @throws OwnError Visszadobjuk a hiba Üzenetet
	 */
	public EyeBall() throws OwnError {
		sheet = new SheetLoader("/entity/eyeball_sheet.png", 6, 1, 16, 16);
		weapon = new Weapon("eyeball_attack", move_dir);
		// Hitbox setup
		hitbox = new Rectangle(0, 0, 48, 48);
		hitboxDefaultX = hitbox.x;
		hitboxDefaultY = hitbox.y;
		// View distance setupja, meddig lássol el a szem
		view_distance = new Rectangle(-96, -96, 240, 240);	// 5 tile-ig lát el a kis szem
		viewDDefaultX = view_distance.x;
		viewDDefaultY = view_distance.y;
		// Default adatok setup
		healt = 501;	// Azért kell az 1, hogy ne pont kerek szám legyen, különben a damaged metódusban a die metódus sose lesz meghívva
		speed = 1;
		move_dir = "left";
		animationStart();
	}
	/**
	 * Újra definiáéja az Entity osztály metodusát, hogy a fegyverét is kirajzolja, ha azzal éppen támad
	 */
	@Override
	public void draw(Graphics2D grap2) {
		if(weapon.isAttacking()) weapon.draw(grap2);
		grap2.drawImage(skin, getX(), getY(), null); //Az up2-be rakjuk bele a kivágott sheet-et
	}
	/**
	 * Mivel alőre tudni kell egy sheet-ben hol milyen kinézet van, az EyeBell halott kinézete pedig
	 * az 5 indexen érhető el, ezért mikor meghall meghívjuk az őse metodusát, aztán beállítjuk a kinézetet
	 */
	@Override
	protected void die() {
		super.die();
		skin = sheet.get(5);
	}
	/**
	 * Elindítja az animation szállat
	 */
	public void animationStart() {
		animation = new Thread(this);
		aniState = Animation_States.Still;
		animation.start();
	}
	/**
	 * Meghívja az ős metodust, aztán belép a megfelelő state-ba és betölti a támadási kinézetet
	 */
	@Override
	public void attackWithWeapon() {
		super.attackWithWeapon();
		skin = sheet.get(4);
		aniState = Animation_States.Attack;
	}
	/**
	 * Csak akkor mozgunk, he nem támadunk, az ős pedig csak akkor mozog, ha "él" az entitás
	 */
	@Override
	public void moveToPoint(int x, int y) {
		if(aniState != Animation_States.Attack) {
			super.moveToPoint(x, y);
			aniState = Animation_States.Move;
		}
	}
	/**
	 * Addig megy a száll, emeddig meg nem "hal" az EyeBall
	 * váltogat a statek között
	 */
	@Override
	public void run() {
		int ind = 0;
		while(!this.isDead()) {
			// Támadás animáció
			if(aniState == Animation_States.Attack) {
				skin = sheet.get(4);
				if(!weapon.isAttacking()) aniState = Animation_States.Still;
			}

			// Egyhelyben álló animáció
			if(aniState == Animation_States.Still) {
					skin = sheet.get(ind);
					if(ind == 0) ind = 1;
					else ind = 0;
			}
			
			// Mozgásban lévő animáció
			if(aniState == Animation_States.Move) {
				if((lastX == getX() && lastY == getY())) {
					aniState = Animation_States.Still;
				}
				switch(move_dir) {
				case "left":
					skin = sheet.get(3);
					break;
				case "right":
					skin = sheet.get(2);
					break;
				}
				lastX = getX();
				lastY = getY();
			}
			try {
				Thread.sleep(250);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		/**
		 * Halál kinézet
		 */
		skin = sheet.get(5);
	}
	/**
	 * Megvalosítja az ős reLoad metodusát
	 * @throws IOException 
	 * @throws NullPointerException 
	 * @throws IllegalArgumentException 
	 */
	@Override
	public void reLoad() throws IllegalArgumentException, NullPointerException, IOException {
		sheet = new SheetLoader("/entity/eyeball_sheet.png", 6, 1, 16, 16);
		this.weapon.getAttackHitbox().reLoad();
		animationStart();
	}
}
