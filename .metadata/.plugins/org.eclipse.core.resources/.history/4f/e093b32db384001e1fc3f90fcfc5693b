package gameplay;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.IOException;
import java.util.ArrayList;

import entity.Player;
import entity.Shadow;
import object.OsObject;
import ospanel.OsPanel;
import tile.TileManager;

public class GamePanel extends OsPanel implements Runnable{
	
	public Map_Status map_state = Map_Status.IN_NEW;
	KeyHandler keyH = new KeyHandler();	// Gomb nyomásokat lekezeli
	Thread mainT;	// A main szálla a játéknak
	private Player gamer = new Player(this, keyH);
	Shadow shadow = new Shadow(this);
	private PreviousMaps prevMaps = new PreviousMaps();
	public boolean isMapInPrevMaps = false;
	
	private int fps = 60;
	public TileManager tileMg = new TileManager(this, "/maps/map2.txt");
	public CollisionChecker cChecker = new CollisionChecker(this);
	
	public ArrayList<OsObject> objects = new ArrayList<OsObject>();
	//public OsObject objects[] = new OsObject[10];	//TODO átalakítani
	public AssetSetter assSetter = new AssetSetter(this, "/obj_positions/obj_pos2.txt");
	
	public GamePanel() {
		super();
		this.addKeyListener(keyH);
		this.setFocusable(true);	// Fokuszál a key inputra
	}
	
	public void setupGame() {
		assSetter.setObject();
		gamer.defaultPos();
	}
	
	public void startMainT() {
		mainT = new Thread(this);
		mainT.start();
	}
	
	public void resetObjects() {
		objects = new ArrayList<OsObject>();
	}
	
	public void saveMap() {
		if(!isMapInPrevMaps) {
			prevMaps.addPrevMap(tileMg, objects, gamer.getX(), gamer.getY());
			prevMaps.setupCurrentPrev();
		}
	}
	
	public void enterNewMap() {
		System.out.println("enterNewMap");
		saveMap();
		tileMg = new TileManager(this, "/maps/map2.txt");
		objects = new ArrayList<OsObject>();
		isMapInPrevMaps = false;
		map_state = Map_Status.IN_NEW;
		setupGame();
	}
	
	public void loadPreviousMap() {
		saveMap();
		Map tmp = prevMaps.getPrevious();
		if(tmp == null) return;
		tileMg = tmp.getTileMg();
		objects = tmp.getObjects();
		gamer.setX(tmp.getPlayerX());
		gamer.setY(tmp.getPlayerY());
		isMapInPrevMaps = tmp.isMapInPrevMaps;
		map_state = tmp.map_state;
		assSetter.closeAllDoor();
		System.out.println("prevMaps.CurrentPrev: " + prevMaps.getCurrentPrev());
		System.out.println("prevMaps.size: " + prevMaps.size());
	}
	
	public void enterPreviousMapFromPreviousMap() {
		Map tmp = prevMaps.getNextPrevMap();
		if(tmp == null) {
			enterNewMap();
			return;
		}
		tileMg = tmp.getTileMg();
		objects = tmp.getObjects();
		gamer.setX(tmp.getPlayerX());
		gamer.setX(tmp.getPlayerY());
		isMapInPrevMaps = tmp.isMapInPrevMaps;
		map_state = tmp.map_state;
		assSetter.closeAllDoor();
		System.out.println("prevMaps.CurrentPrev: " + prevMaps.getCurrentPrev());
		System.out.println("prevMaps.size: " + prevMaps.size());
	}
	
	@Override
	public void run() {
		double drawInterval = 1000000000/fps;	// Ez egy másodperc nano sec-ben nézve és elosztva az fps-el, ennyi időnként fissítsuk a képernyöt
		double nextDrawTime = System.nanoTime() + drawInterval;	// nano sec-ben számolva mikor kell kövinenk frissíteni a képet
		long timer = 0;
		int drawCount = 0;
		
		// A game loop addig megy ameddig tart a main szállunk
		while(mainT != null) {
			
			try {
				updatePanel();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			repaint();
			drawCount++;
			
			try {
				double remainingTime = nextDrawTime - System.nanoTime();	// maga a parancsok végrehajtása közben is eltelt idő, ha maradt azzal dolgozunk
				remainingTime /= 1000000;	// nano sec-et át kell váltani milli sec-re, mert a sleep-nek az kell
				if(remainingTime < 0) {
					remainingTime = 0;	// Ha gond lenne, lagolnánk, akkor ne essen minuszba a sleep time
				}
				Thread.sleep((long)remainingTime);
				nextDrawTime += drawInterval;
				
				// Minden másodpercben kiírjuk, hányszor volt meghívva a repaint
	            /*if (System.nanoTime() - timer >= 1000000000) {
	            	System.out.println("FPS: " + drawCount);
	                drawCount = 0;
	                timer = System.nanoTime();
	            }*/
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public void updatePanel() throws IOException {
		//Itt kell meghívni az update-eket
		gamer.update();
	}
	
	public void paintComponent(Graphics grap) {
		//Itt kell rajzolni minden fel
		super.paintComponent(grap);
		Graphics2D grap2 = (Graphics2D) grap;
		
		//Tileok, legalsó elemek
		tileMg.draw(grap2);	// Előbb ezt kell meghívni, hogy a tileok legyenek hátrébb a layerben
		
		//Objectek
		for(int i = 0; i < objects.size(); i++) {
			objects.get(i).draw(grap2, this);
		}
		
		//Entity draw
		shadow.draw(grap2);
		
		//Játékos, neki kell lennie legfent
		gamer.draw(grap2);
		//System.out.println(gamer.getPoint());	//TODO fejleszteni
		
		grap2.dispose();	// Megsporolunk egy kis memóriát
	}
}
