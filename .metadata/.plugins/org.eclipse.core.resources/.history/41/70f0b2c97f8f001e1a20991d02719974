package entity;

import java.awt.Graphics2D;
import java.io.Serializable;

@SuppressWarnings("serial")
/**
 * Az osztály egy Entity-nek a fegyverének az adatait tárolja
 */
public class Weapon implements Runnable, Serializable{
	/**
	 * A fegyvernek a hitboxa és kinézete
	 */
	private AttackHitbox attack;
	private boolean attacking = false;
	/**
	 * Szükség van egy szállra a támadás animációjának
	 */
	private transient Thread attackTime;
	/**
	 * A fegyvernak a sebbzése
	 */
	private int damage;
	private String move_dir;
	/**
	 * Konstruktor, ami beállítja a fegyver fajtájához képest az adatait
	 * @param weapon_type
	 * @param move_dir
	 */
	public Weapon(String weapon_type, String move_dir) {
		this.move_dir = move_dir;
		attack = new AttackHitbox(weapon_type, this.move_dir);
		switch(weapon_type) {
		case "ground_attack":
			damage = 10;
			break;
		case "eyeball_attack":
			damage = 2;
			break;
		case "wave_attack":
			damage = 25;
			break;
		}
	}
	/**
	 * A megkapott koordinátán támad a fegyver, azaz beállítja a hitboxát és elindítja a támadás animáció szállát
	 * @param x
	 * @param y
	 * @param move_dir
	 * @return
	 */
	public void attack(int x, int y, String move_dir) {
		attack.setX(x);
		attack.setY(y);
		this.move_dir = move_dir;
		attackTime = new Thread(this);
		attackTime.start();
	}
	/**
	 * Kirajzolja a kapott Graphics2D-re a fegyver kinézetét, a hivónak kell tudni, csak akkor rajzolja, ha éppen támad
	 * @param grap2
	 */
	public void draw(Graphics2D grap2) {
		grap2.drawImage(attack.getSkin(), attack.getX()+attack.hitboxDefaultX, attack.getY()+attack.hitboxDefaultY, null);
	}
	
	public boolean isAttacking() {
		return attacking;
	}
	/**
	 * Támadás animáció, miközben tart az attacking adattag igaz, ha végez vel akkor hamisra vált
	 */
	@Override
	public void run() {
		try {
			attacking = true;
			switch(attack.getWeaponType()) {
			case "ground_attack":
				Thread.sleep(500); //Eddig tart egy támadás
				attacking = false;
				break;
			case "wave_attack":
				attack.setupAttackType(move_dir);
				Thread.sleep(500);
				attacking = false;
				break;
			case "eyeball_attack":
				Thread.sleep(2000);
				attacking = false;
				break;
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public AttackHitbox getAttackHitbox() {
		return attack;
	}
	public int getDamage() {
		return damage;
	}
	public void joinThread(Object obj) {
		try {
			attackTime.join(pbj);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
