package loaders;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.spi.CurrencyNameProvider;

import gameplay.PreviousMaps;

class scoure implements Serializable{
	private String name;
	private int point;
	public scoure(String name, int point) {
		this.name = name;
		this.point = point;
	}
	public void add() {
		point++;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getPoint() {
		return point;
	}
	public void setPoint(int point) {
		this.point = point;
	}
}

public class BestRounds extends ArrayList<scoure> implements Serializable{
	private int currentPlayerInd;
	public void setPlayer(String playerName) {
		for(int i = 0; i < this.size(); i++) {
			if(this.get(i).getName() == playerName) this.currentPlayerInd = i;
		}
		this.add(new scoure(playerName, 0));
		currentPlayerInd = this.size()-1;
	}
	public void addPoint() {
		this.get(currentPlayerInd).add(););
	}
	public static void saveBests(BestRounds bests, String fName) {
		try (ObjectOutputStream saver = new ObjectOutputStream(new FileOutputStream(fName))) {
            saver.writeObject(bests);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	public static BestRounds loadBests(String fName) {
		try (ObjectInputStream loader = new ObjectInputStream(new FileInputStream(fName))) {
            Object bests = loader.readObject();
            if (bests instanceof PreviousMaps) {
                return (BestRounds) bests;
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return new BestRounds();
	}
}
